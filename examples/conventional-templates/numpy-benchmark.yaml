apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: numpy-benchmark
  labels:
    workflows.diamond.ac.uk/science-group-examples: "true"
  annotations:
    workflows.argoproj.io/title: Numpy Benchmark
    workflows.argoproj.io/description: |
      Runs a numpy script in a python container.
      The script finds the normal of the dot product of two random matrices.
      Matrix sizes are specified by the input parameter "size".
    workflows.diamond.ac.uk/repository: "https://github.com/DiamondLightSource/workflows"
    workflows.diamond.ac.uk/parameter-schema.size: |
      {
        "type": "integer",
        "default": 2000
      }
    workflows.diamond.ac.uk/parameter-schema.memory: |
      {
        "type": "string",
        "pattern": "^[0-9]+[GMK]i$",
        "default": "20Gi"
      }
    workflows.diamond.ac.uk/ui-schema: |
      {
        "type": "VerticalLayout",
        "elements": [
          {
            "type": "Control",
            "scope": "#/properties/memory",
            "label": "Memory"
          },
          {
            "type": "Control",
            "scope": "#/properties/size",
            "label": "Matrix Size"
          }
        ]
      }
spec:
  entrypoint: workflow-entry
  arguments:
    parameters:
      - name: size
        value: 2000
      - name: memory
        value: 20Gi
  volumeClaimTemplates:
  - metadata:
      name: tmpdir
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
      storageClassName: netapp
  templates:
    - name: install-deps
      script:
        image: python:3.12
        volumeMounts:
        - name: tmpdir
          mountPath: /tmp
        command: [bash]
        source: |
          python -m venv /tmp/venv
          /tmp/venv/bin/pip install numpy
          
    - name: numpy-test
      inputs:
        parameters:
          - name: size
          - name: memory
      script:
        image: python:3.12
        volumeMounts:
        - name: tmpdir
          mountPath: /tmp
        command: ["/tmp/venv/bin/python"]
        env:
          - name: MKL_NUM_THREADS
            value: "1"
          - name: NUMEXPR_NUM_THREADS
            value: "1"
          - name: OMP_NUM_THREADS
            value: "1"
        source: |
          import numpy as np
          import time

          n = int("{{ inputs.parameters.size }}")
          A = np.random.randn(n,n).astype('float64')
          B = np.random.randn(n,n).astype('float64')
          start_time = time.time()
          nrm = np.linalg.norm(A@B)
          print(" took {} seconds ".format(time.time() - start_time))
          print(" norm = ",nrm)
          print(np.__config__.show())
      podSpecPatch: |
        containers:
        - name: main
          resources:
            requests:
              cpu: "1"
              memory: "{{ inputs.parameters.memory }}"
            limits:
              cpu: "1"
              memory: "{{ inputs.parameters.memory }}"

    - name: workflow-entry
      dag:
        tasks:
        - name: install-numpy
          template: install-deps
        - name: run-benchmark
          template: numpy-test
          dependencies: [install-numpy]
          arguments:
            parameters:
            - name: size
              value: "{{workflow.parameters.size}}"
            - name: memory
              value: "{{workflow.parameters.memory}}"
