apiVersion: batch/v1
kind: Job
metadata:
  name: copy-host-artifact-s3
  namespace: workflows
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 30
  activeDeadlineSeconds: 1800
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: copy-host-artifact-s3
      containers:
        - name: copy-host-artifact-s3
          image: bitnamilegacy/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e

              SRC_SECRET="host-artifact-s3"
              DST_SECRET="artifact-s3"
              NAMESPACE="workflows"

              if ! kubectl get secret "$SRC_SECRET" -n "$NAMESPACE" >/dev/null 2>&1; then
                echo "Secret '$SRC_SECRET' not found yet. Exiting with failure so that Job retries."
                exit 1
              fi

              echo "Secret found! Copying to '$DST_SECRET'..."
              kubectl get secret "$SRC_SECRET" -n "$NAMESPACE" -o yaml \
                | grep -v '^\s*uid:' \
                | grep -v '^\s*resourceVersion:' \
                | grep -v '^\s*creationTimestamp:' \
                | grep -v '^\s*managedFields:' \
                | sed "s/name: $SRC_SECRET/name: $DST_SECRET/" \
                | kubectl apply -n "$NAMESPACE" -f -

              echo "host-artifact-s3 secret copied successfully."
              exit 0
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: copy-host-artifact-s3
  namespace: workflows
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: copy-host-artifact-s3
  namespace: workflows
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "apply"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: copy-host-artifact-s3
  namespace: workflows
subjects:
  - kind: ServiceAccount
    name: copy-host-artifact-s3
roleRef:
  kind: Role
  name: copy-host-artifact-s3
  apiGroup: rbac.authorization.k8s.io