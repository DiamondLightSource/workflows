type Artifact {
  name: String!
  url: Url!
  mimeType: String!
}

scalar DateTime

scalar JSON

type Mutation {
  submitWorkflowTemplate(name: String!, visit: VisitInput!, parameters: JSON!): Workflow!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  workflow(visit: VisitInput!, name: String!): Workflow!
  workflows(visit: VisitInput!, cursor: String, limit: Int): WorkflowConnection!
  workflowTemplate(name: String!): WorkflowTemplate!
  workflowTemplates(cursor: String, limit: Int): WorkflowTemplateConnection!
  _service: _Service!
}

type Task {
  id: String!
  name: String!
  status: TaskStatus!
  depends: [String!]!
  dependencies: [String!]!
  artifacts: [Artifact!]!
}

enum TaskStatus {
  PENDING
  RUNNING
  SUCCEEDED
  SKIPPED
  FAILED
  ERROR
  OMITTED
}

scalar Url

type Visit {
  proposalCode: String!
  proposalNumber: Int!
  number: Int!
}

input VisitInput {
  proposalCode: String!
  proposalNumber: Int!
  number: Int!
}

type Workflow {
  name: String!
  visit: Visit!
  status: WorkflowStatus
}

type WorkflowConnection {
  pageInfo: PageInfo!
  edges: [WorkflowEdge!]!
  nodes: [Workflow!]!
}

type WorkflowEdge {
  node: Workflow!
  cursor: String!
}

type WorkflowErroredStatus {
  startTime: DateTime!
  endTime: DateTime!
  message: String
  tasks: [Task!]!
}

type WorkflowFailedStatus {
  startTime: DateTime!
  endTime: DateTime!
  message: String
  tasks: [Task!]!
}

type WorkflowPendingStatus {
  message: String
}

type WorkflowRunningStatus {
  startTime: DateTime!
  message: String
  tasks: [Task!]!
}

union WorkflowStatus = WorkflowPendingStatus | WorkflowRunningStatus | WorkflowSucceededStatus | WorkflowFailedStatus | WorkflowErroredStatus

type WorkflowSucceededStatus {
  startTime: DateTime!
  endTime: DateTime!
  message: String
  tasks: [Task!]!
}

type WorkflowTemplate {
  name: String!
  maintainer: String!
  title: String
  description: String
  arguments: JSON!
  uiSchema: JSON
}

type WorkflowTemplateConnection {
  pageInfo: PageInfo!
  edges: [WorkflowTemplateEdge!]!
  nodes: [WorkflowTemplate!]!
}

type WorkflowTemplateEdge {
  node: WorkflowTemplate!
  cursor: String!
}

type _Service {
  sdl: String
}
